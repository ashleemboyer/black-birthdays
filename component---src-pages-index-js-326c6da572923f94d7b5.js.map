{"version":3,"sources":["webpack:///./src/pages/index.js","webpack:///./src/components/seo.js"],"names":["__webpack_exports__","_ref","data","is_mobile","window","innerWidth","items","allSitePage","edges","filter","_ref2","node","context","name","react__WEBPACK_IMPORTED_MODULE_2___default","a","createElement","_components_layout__WEBPACK_IMPORTED_MODULE_3__","_components_seo__WEBPACK_IMPORTED_MODULE_4__","title","keywords","style","textAlign","map","_ref3","index","key","position","width","height","display","margin","gatsby__WEBPACK_IMPORTED_MODULE_5__","to","path","_components_image__WEBPACK_IMPORTED_MODULE_6__","borderRadius","src","replace","lineHeight","verticalAlign","textDecoration","color","backgroundColor","onMouseEnter","e","target","opacity","onMouseLeave","top","right","bottom","left","query","SEO","description","lang","meta","site","_public_static_d_2417117884_json__WEBPACK_IMPORTED_MODULE_0__","metaDescription","siteMetadata","react__WEBPACK_IMPORTED_MODULE_1___default","react_helmet__WEBPACK_IMPORTED_MODULE_3___default","htmlAttributes","titleTemplate","content","property","author","concat","length","join","defaultProps","propTypes","PropTypes","string","arrayOf","object","isRequired"],"mappings":"0MAMeA,EAAA,iBAAAC,GAAc,IAAXC,EAAWD,EAAXC,KACVC,EAAYC,OAAOC,YAAc,IAEnCC,EADUJ,EAAKK,YAAYC,MACbC,OAAO,SAAAC,GACvB,QADqCA,EAAXC,KACZC,QAAQC,OAGxB,OACEC,EAAAC,EAAAC,cAACC,EAAA,EAAD,KACEH,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAKC,MAAM,OAAOC,SAAU,mCAC5BN,EAAAC,EAAAC,cAAA,OAAKK,MAAO,CAAEC,UAAW,WACtBhB,EAAMiB,IAAI,SAAAC,EAAWC,GAAU,IAAlBd,EAAkBa,EAAlBb,KACZ,OAAOG,EAAAC,EAAAC,cAAA,OACLU,IAAKD,EACLJ,MAAO,CACLM,SAAU,WACVC,MAAOzB,EAAY,MAAQ,QAC3B0B,OAAQ,QACRC,QAAS,eACTC,OAAQ,QAGVjB,EAAAC,EAAAC,cAACgB,EAAA,EAAD,CAAMC,GAAItB,EAAKuB,MACbpB,EAAAC,EAAAC,cAACmB,EAAA,EAAD,CACEd,MAAO,CACLO,MAAO,OACPC,OAAQ,QACRO,aAAc,eAEhBC,IAAK1B,EAAKC,QAAQC,KAAKyB,QAAQ,QAAS,IAAM,SAEhDxB,EAAAC,EAAAC,cAAA,KACEK,MAAO,CACLQ,OAAQ,OACRU,WAAY,OACZC,cAAe,SACflB,UAAW,SACXmB,eAAgB,OAChBC,MAAO,QACPC,gBAAiB,UACjBP,aAAc,gBAGfzB,EAAKC,QAAQC,MAEhBC,EAAAC,EAAAC,cAAA,OACE4B,aAAc,SAACC,GAAD,OAAOA,EAAEC,OAAOzB,MAAM0B,QAAU,OAC9CC,aAAc,SAACH,GAAD,OAAOA,EAAEC,OAAOzB,MAAM0B,QAAU,KAC9C1B,MAAO,CACLsB,gBAAiB,gBACjBI,QAAS,IACTpB,SAAU,WACVsB,IAAK,EACLC,MAAO,EACPC,OAAQ,EACRC,KAAM,YAWjB,IAAMC,EAAK,8GC5DlB,SAASC,EAATrD,GAA2D,IAA5CsD,EAA4CtD,EAA5CsD,YAAaC,EAA+BvD,EAA/BuD,KAAMC,EAAyBxD,EAAzBwD,KAAMrC,EAAmBnB,EAAnBmB,SAAUD,EAASlB,EAATkB,MACxCuC,EADiDC,EAAAzD,KACjDwD,KAcFE,EAAkBL,GAAeG,EAAKG,aAAaN,YAEzD,OACEO,EAAA/C,EAAAC,cAAC+C,EAAAhD,EAAD,CACEiD,eAAgB,CACdR,QAEFrC,MAAOA,EACP8C,cAAa,QAAUP,EAAKG,aAAa1C,MACzCsC,KAAM,CACJ,CACE5C,KAAI,cACJqD,QAASN,GAEX,CACEO,SAAQ,WACRD,QAAS/C,GAEX,CACEgD,SAAQ,iBACRD,QAASN,GAEX,CACEO,SAAQ,UACRD,QAAO,WAET,CACErD,KAAI,eACJqD,QAAO,WAET,CACErD,KAAI,kBACJqD,QAASR,EAAKG,aAAaO,QAE7B,CACEvD,KAAI,gBACJqD,QAAS/C,GAEX,CACEN,KAAI,sBACJqD,QAASN,IAGVS,OACCjD,EAASkD,OAAS,EACd,CACEzD,KAAI,WACJqD,QAAS9C,EAASmD,KAAT,OAEX,IAELF,OAAOZ,KAKhBH,EAAIkB,aAAe,CACjBhB,KAAI,KACJC,KAAM,GACNrC,SAAU,GACVmC,YAAW,IAGbD,EAAImB,UAAY,CACdlB,YAAamB,IAAUC,OACvBnB,KAAMkB,IAAUC,OAChBlB,KAAMiB,IAAUE,QAAQF,IAAUG,QAClCzD,SAAUsD,IAAUE,QAAQF,IAAUC,QACtCxD,MAAOuD,IAAUC,OAAOG,YAGXxB","file":"component---src-pages-index-js-326c6da572923f94d7b5.js","sourcesContent":["import React from \"react\"\nimport Layout from \"../components/layout\"\nimport SEO from \"../components/seo\"\nimport { Link, graphql } from \"gatsby\";\nimport Image from \"../components/image\"\n\nexport default ({ data }) => {\n  const is_mobile = window.innerWidth <= 700\n  const edges = data.allSitePage.edges\n  var items = edges.filter(({ node }) => {\n    return !!node.context.name\n  })\n\n  return (\n    <Layout>\n      <SEO title=\"Home\" keywords={[`gatsby`, `application`, `react`]} />\n      <div style={{ textAlign: 'center' }}>\n        {items.map(({ node }, index) => {\n          return <div\n            key={index}\n            style={{\n              position: 'relative',\n              width: is_mobile ? '90%' : '272px',\n              height: 272 + 32 + 'px',\n              display: 'inline-block',\n              margin: '8px',\n            }}\n          >\n            <Link to={node.path}>\n              <Image\n                style={{\n                  width: '100%',\n                  height: '272px',\n                  borderRadius: '2px 2px 0 0',\n                }}\n                src={node.context.name.replace(/ |\\./g, '') + '.jpg'}\n              />\n              <p\n                style={{\n                  height: '32px',\n                  lineHeight: '32px',\n                  verticalAlign: 'middle',\n                  textAlign: 'center',\n                  textDecoration: 'none',\n                  color: 'white',\n                  backgroundColor: '#212121',\n                  borderRadius: '0 0 2px 2px',\n                }}\n              >\n                {node.context.name}\n              </p>\n              <div\n                onMouseEnter={(e) => e.target.style.opacity = '0.2'}\n                onMouseLeave={(e) => e.target.style.opacity = '0'}\n                style={{\n                  backgroundColor: 'lavenderblush',\n                  opacity: '0',\n                  position: 'absolute',\n                  top: 0,\n                  right: 0,\n                  bottom: 0,\n                  left: 0,\n                }}\n              ></div>\n            </Link>\n          </div>\n        })}\n      </div>\n    </Layout>\n  )\n}\n\nexport const query = graphql`\n  query {\n    allSitePage {\n      edges {\n        node {\n          path\n          context {\n            name\n            birth\n            death\n            about\n            link\n          }\n        }\n      }\n    }\n  }\n`\n","/**\n * SEO component that queries for data with\n *  Gatsby's useStaticQuery React hook\n *\n * See: https://www.gatsbyjs.org/docs/use-static-query/\n */\n\nimport React from \"react\"\nimport PropTypes from \"prop-types\"\nimport Helmet from \"react-helmet\"\nimport { useStaticQuery, graphql } from \"gatsby\"\n\nfunction SEO({ description, lang, meta, keywords, title }) {\n  const { site } = useStaticQuery(\n    graphql`\n      query {\n        site {\n          siteMetadata {\n            title\n            description\n            author\n          }\n        }\n      }\n    `\n  )\n\n  const metaDescription = description || site.siteMetadata.description\n\n  return (\n    <Helmet\n      htmlAttributes={{\n        lang,\n      }}\n      title={title}\n      titleTemplate={`%s | ${site.siteMetadata.title}`}\n      meta={[\n        {\n          name: `description`,\n          content: metaDescription,\n        },\n        {\n          property: `og:title`,\n          content: title,\n        },\n        {\n          property: `og:description`,\n          content: metaDescription,\n        },\n        {\n          property: `og:type`,\n          content: `website`,\n        },\n        {\n          name: `twitter:card`,\n          content: `summary`,\n        },\n        {\n          name: `twitter:creator`,\n          content: site.siteMetadata.author,\n        },\n        {\n          name: `twitter:title`,\n          content: title,\n        },\n        {\n          name: `twitter:description`,\n          content: metaDescription,\n        },\n      ]\n        .concat(\n          keywords.length > 0\n            ? {\n                name: `keywords`,\n                content: keywords.join(`, `),\n              }\n            : []\n        )\n        .concat(meta)}\n    />\n  )\n}\n\nSEO.defaultProps = {\n  lang: `en`,\n  meta: [],\n  keywords: [],\n  description: ``,\n}\n\nSEO.propTypes = {\n  description: PropTypes.string,\n  lang: PropTypes.string,\n  meta: PropTypes.arrayOf(PropTypes.object),\n  keywords: PropTypes.arrayOf(PropTypes.string),\n  title: PropTypes.string.isRequired,\n}\n\nexport default SEO\n"],"sourceRoot":""}